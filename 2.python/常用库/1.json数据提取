#### 一、jsonpath提取json数据

> 安装：pip install jsonpath

- 只能提取json格式的数据
- 提取后的数据和原来的数据类型一致

**语法格式**

| 字符              | 描述                                       |
| ----------------- | ------------------------------------------ |
| $                 | 表示根元素                                 |
| @                 | 当前元素                                   |
| . or []           | 子元素                                     |
| ..                | 递归搜索(不管当前路径，搜索符合条件的数据) |
| *                 | 通配符，表示所有的元素                     |
| []                | 子元素操作符                               |
| [,]               | 支持迭代器中做多选，多个key用逗号隔开      |
| [start:stop:step] | 数组分割操作，等同于切片                   |
| ?()               | 应用过滤表达式                             |

**过滤表达式**

| 原字符 | 描述                                                 |
| ------ | ---------------------------------------------------- |
| ==     | 等于                                                 |
| !=     | 不等于符号                                           |
| <      | 小于符号                                             |
| <=     | 小于等于符号                                         |
| >      | 大于                                                 |
| >=     | 大于等于符号                                         |
| =~     | 判断是否符合正则表达式，例如[?(@.name =~ /foo.*?/i)] |
| in     | 所属符号：[?(@.name in['张二','张三'])]              |
| not in | 排除符号：[?(@.name not in ['张二','张三'])]         |
| &&     | 逻辑 AND，用于合并多个过滤器表达式                   |
| II     | 逻辑 OR，用于组合多个过滤器表达式                    |

#### 二、json模块提取json数据

- 序列化：将python对象进行json格式的编码

  > json.dump()：对python对象进行序列化保存到文件中
  >
  > json.dumps()：将python对象转换成json数据

- 反序列化：将json格式数据解码成python对象

  > json.load()：将fp支持的文件反序列化为python对象
  >
  > json.loads()：将json数据反序列化成python对象

